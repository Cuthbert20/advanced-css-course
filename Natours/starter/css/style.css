/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* universal selector */
* {
  margin: 0;
  padding: 0;
  /* change box model so the borders and padding are no long added to total with and height */
  box-sizing: border-box;
}

html {
  /* root font size 1rem =  10px now */
  font-size: 10px;
}

/* using inheritance property for font properties */
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
}

.header {
  height: 95vh;
  /* background image with linear gradient */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.773),
      rgba(130, 165, 153, 0.794)
    ),
    url("../img/hero.jpg");
  background-size: cover;
  /* makes sure whatever the viewport size the background image will always stay on the top */
  background-position: top;
  /* use clippypath website */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.logo-box {
  position: absolute;
  /* when you set the position: absolute you will then normally set the top and left properties 
    I set position: relative on the parent element .header because .logo-box will reference header
    for top and left count
    */
  top: 4rem;
  left: 4rem;
}

.logo {
  height: 3.5rem;
}

.text-box {
  /* center text */
  /* I am setting position to absolue to the parent element, which is .header which has a position of relative
      when messuring top &|| left the 50% of the width or height of the parent element.
      I used transform: Translate(-40%, -50%) to get the .text-box element to be centered instead of on the left edge of the element.
      see Advanced CSS & SASS #7, 13:00.
    */
  position: absolute;
  top: 40%; /* in relation to the parent elemnt */
  left: 50%; /* in relation to the parent elemnt */
  transform: translate(-50%, -50%); /* in relation to the element itself */
  /* centers all text including the white-btn/a element */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* to get ride of shake on animation use backface-visibility: hidden; */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary-main {
  /* using display block because a span is an inline element and we want OUTDOORS to be on its own line */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* animation name and duration are the only two required properties for an animation but, 
    there are a lot more properties that you can set */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* with ease-in animation starts slower then ends faster ease-out is the reverse of that */
  /* animation-timing-function: ease-in; */
  /* animation-iteration-count: 3; */
  /* animation-delay: 3s; */
}

.heading-primary-sub {
  /* also using display block for this span occupy 100% width */
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* using shorthand property animation, (animationName, duration, timing-function */
  animation: moveInRight 1s ease-out;
}
/* creating an animation using keyframes */
@keyframes moveInLeft {
  /* setting up animation */
  0% {
    /* begining of animation the element will be invisible ie opacity 0 */
    opacity: 0;
    transform: translateX(-10rem);
    /* we could also use things like rotate(-50deg); in the transform line */
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    /* the element will be totally visible at the end of the animation */
    opacity: 1;
    /* we want the element to end up at its position, that is why we use 0 */
    transform: translateX(0);
  }
}

/* creating an animation using keyframes */
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  /* top & bottom, left & right */
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  /* active psudo class is when the element is being clicked */
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* pseudo elements allow you to style a specific part of the selected element(s) its like creating a virtual element before & after,
You always have to set content & display for pseudo elements*/
.btn::after {
  content: "";
  display: inline-block;
  /* height and width of .btn element */
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /* position needs to have a reference ie an element to reference its position from 
  so we need to add position: relative to the element we want it to reference ie its parent element (the .btn) */
  position: absolute;
  top: 0;
  left: 0;
  /* using z-index to hide element, until we hover */
  z-index: -1;
  transition: all 0.4s;
}
.btn-white::after {
  background-color: #fff;
}
.btn:hover::after {
  /* we now want the btn to not be hidden */
  /* scale increases size of element */
  transform: scaleX(1.4) scaleY(1.6);
  /* trick to fade out set transition all .4s to .btn::after pseudo element then use opacity on hover */
  opacity: 0;
}

.btn-animated {
  /* animation name, duration, timing-function, delay */
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* using animation-fill-mode backwars so that the button does not dispaly until the animation moveInBottom runs */
  animation-fill-mode: backwards;
}
